# Créé par guil.nedelec, le 25/03/2015 en Python 3.2
import pygame
from pygame.locals import *

#Paramètres de la fenêtre
nombre_sprite_cote = 15
taille_sprite = 30
cote_fenetre = nombre_sprite_cote * taille_sprite

class Niveau :

    def __init__(self, fichier):
        self.fichier = fichier
        self.structure =0

    def generer(self):
        with open(self.fichier, "r") as fichier: #Ouverure et lecture du fichier
            structure_niveau = []
            for ligne in fichier: #On parcourt les lignes du fichier
                ligne_niveau = []
                for sprite in ligne: #On parcourt les lettres (sprites) du fichier
                    if sprite != '\n': #On ignore les sauts de lignes
                        ligne_niveau.append(sprite) #On ajoute le sprite à la liste de la ligne
                structure_niveau.append(ligne_niveau) #On ajoute la ligne à la liste du niveau
            self.structure = structure_niveau #Sauvegarde de la structure

    def afficher(self, fenetre):
    #Chargement des images (seule celle d'arrivée contient de la transparence)
        mur = pygame.image.load('mur.png').convert()
        depart = pygame.image.load('depart.png').convert()
        arrivee = pygame.image.load('arrivee.png').convert_alpha()
        caisse = pygame.image.load('caisse.jpg').convert()

        #On parcourt la liste du niveau
        num_ligne = 0
        for ligne in self.structure:
			#On parcourt les listes de lignes
                num_case = 0
                for sprite in ligne:
				    #On calcule la position réelle en pixels
                        x = num_case * taille_sprite
                        y = num_ligne * taille_sprite
                        if sprite == 'm':		   #m = Mur
                                fenetre.blit(mur, (x,y))
                        elif sprite == 'd':		   #d = Départ
                                fenetre.blit(depart, (x,y))
                        elif sprite == 'a':		   #a = Arrivée
                                fenetre.blit(arrivee, (x,y))
                        elif sprite == 'c':		   #c = Caisse
                                fenetre.blit(caisse, (x,y))
                        num_case += 1
                num_ligne += 1


class Perso:

    def __init__(self, droite, gauche, haut, bas, niveau):

        #Sprites du personnage
        self.droite = pygame.image.load(droite).convert_alpha()
        self.gauche = pygame.image.load(gauche).convert_alpha()
        self.haut = pygame.image.load(haut).convert_alpha()
        self.bas = pygame.image.load(bas).convert_alpha()
        #Position du personnage en cases et en pixels
        self.case_x = 0
        self.case_y = 0
        self.x = 0
        self.y = 0
        #Direction par défaut
        self.direction = self.droite
        #Niveau dans lequel le personnage se trouve
        self.niveau = niveau


    def deplacer(self, direction):
        #Déplacement vers la droite
        if direction == 'droite':
            #Pour ne pas dépasser l'écran
            if self.case_x < (nombre_sprite_cote - 1):
                #On vérifie que la case de destination n'est pas un mur
                if self.niveau.structure[self.case_y][self.case_x+1] != 'm':
                    #Déplacement d'une case
                    self.case_x += 1
                    #Calcul de la position "réelle" en pixel
                    self.x = self.case_x * taille_sprite
            #Image dans la bonne direction
            self.direction = self.droite

        #Déplacement vers la gauche
        if direction == 'gauche':
            if self.case_x > 0:
                if self.niveau.structure[self.case_y][self.case_x-1] != 'm':
                    self.case_x -= 1
                    self.x = self.case_x * taille_sprite
            self.direction = self.gauche

        #Déplacement vers le haut
        if direction == 'haut':
            if self.case_y > 0:
                if self.niveau.structure[self.case_y-1][self.case_x] != 'm':
                    self.case_y -= 1
                    self.y = self.case_y * taille_sprite
            self.direction = self.haut

        #Déplacement vers le bas
        if direction == 'bas':
            if self.case_y < (nombre_sprite_cote - 1):
                if self.niveau.structure[self.case_y+1][self.case_x] != 'm':
                    self.case_y += 1
                    self.y = self.case_y * taille_sprite
            self.direction = self.bas
